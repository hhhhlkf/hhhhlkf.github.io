<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Linexus的博客</title>
    <link>https://hhhhlkf.github.io/post/</link>
    <description>Recent content in Posts on Linexus的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hhhhlkf.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>吉林大学软件工程荣誉课随机数分组器</title>
      <link>https://hhhhlkf.github.io/post/%E5%90%89%E6%9E%97%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%8D%A3%E8%AA%89%E8%AF%BE%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E7%BB%84%E5%99%A8/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/%E5%90%89%E6%9E%97%E5%A4%A7%E5%AD%A6%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E8%8D%A3%E8%AA%89%E8%AF%BE%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%88%86%E7%BB%84%E5%99%A8/</guid>
      <description>${ message }请输入总共人数：请输入每组人数：随机分组开始${name[index-1]}号同学分到了${divideGroup[index-1]}组
#app {text-align: center;font-family: -apple-system, &#34;Helvetica Neue&#34;, Arial, &#34;PingFang SC&#34;, &#34;Hiragino Sans GB&#34;, STHeiti, &#34;Microsoft YaHei&#34;, &#34;Microsoft JhengHei&#34;, &#34;Source Han Sans SC&#34;, &#34;Noto Sans CJK SC&#34;, &#34;Source Han Sans CN&#34;, &#34;Noto Sans SC&#34;, &#34;Source Han Sans TC&#34;, &#34;Noto Sans CJK TC&#34;, &#34;WenQuanYi Micro Hei&#34;, SimSun, sans-serif;line-height: 1.1;font-weight: 700;font-size: 36px;}#rbk {height: 64ch;width: 80ch;margin: 0 auto;border: 2px solid #282A36;border-radius: 2ch;}.</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课  第五次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE-%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE-%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第五次上机实验 7-1 图的深度优先搜索I (100 分) 无向图 G 有 n 个顶点和 m 条边。求图G的深度优先搜索树(森林)以及每个顶点的发现时间和完成时间。每个连通分量从编号最小的结点开始搜索，邻接顶点选择顺序遵循边的输入顺序。
在搜索过程中，第一次遇到一个结点，称该结点被发现；一个结点的所有邻接结点都搜索完，该结点的搜索被完成。深度优先搜索维护一个时钟，时钟从0开始计数，结点被搜索发现或完成时，时钟计数增1，然后为当前结点盖上时间戳。一个结点被搜索发现和完成的时间戳分别称为该结点的发现时间和完成时间。
输入格式: 第1行，2个整数n和m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.
第2到m+1行，每行两个整数u和v，用空格分隔，表示顶点u到顶点v有一条边，u和v是顶点编号，1≤u,v≤n.
输出格式: 第1到n行，每行两个整数di和fi，用空格分隔，表示第i个顶点的发现时间和完成时间1≤i≤n 。
第n+1行，1个整数 k ，表示图的深度优先搜索树(森林)的边数。
第n+2到n+k+1行，每行两个整数u和v,表示深度优先搜索树(森林)的一条边&amp;lt;u,v&amp;gt;，边的输出顺序按 v 结点编号从小到大。 作者 : 谷方明 单位: 吉林大学 代码长度限制:16 KB 时间限制:200 ms 内存限制:10 MB
输入样例: 在这里给出一组输入。例如：
6 5 1 3 1 2 2 3 4 5 5 6 输出样例: 在这里给出相应的输出。例如：
1 6 3 4 2 5 7 12 8 11 9 10 4 3 2 1 3 4 5 5 6 思路：==题目要看懂==。 1.</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第一次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第一次上机实验 一、7—1重复计数 在一个有限的正整数序列中，有些数会多次重复出现。请你统计每个数的出现次数， 然后按数字在序列中第一次出现的位置顺序输出数及其次数。
输入格式: 第1行，1个整数N，表示整数的个数，(1≤N≤50000)。
第2行，N个正整数，每个整数x 都满足 1 ≤ x ≤2000000000。
输出格式: 若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数，第二个是该数在序列中出现的次数。 输入样例:
在这里给出一组输入。例如：
12 8 2 8 2 2 11 1 1 8 1 13 13 输出样例:
在这里给出相应的输出。例如：
8 3 2 3 11 1 1 3 13 2 方法：
这里直接推荐使用C++STL库中的map容器，数据在map容器中存储结构是红黑树，其操作函数中find``count在查找过程中均为O(nlogn) 不超出这道题的时间限制，且退化性不强，下面是代码：
#include&amp;lt;iostream&amp;gt;#include&amp;lt;map&amp;gt;using namespace std; int a[50010]; int main() { int n; cin&amp;gt;&amp;gt;n; map&amp;lt;int,int&amp;gt;m;//定义map容器，key值为所给数字值，value值为所给计数值  int count1=0; int n1; for(int i=0;i&amp;lt;n;i++) { cin&amp;gt;&amp;gt;n1; map&amp;lt;int,int&amp;gt;::iterator pos=m.find(n1); if(pos!=m.end())//没有该数字  { pos-&amp;gt;second++; } else { m.</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第七次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%83%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%83%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第七次上机实验 一.7-1 序列调度 (100 分) 有一个N个数的序列A：1，2，……，N。有一个后进先出容器D，容器的容量为C。如果给出一个由1到N组成的序列，那么可否由A使用容器D的插入和删除操作得到。
输入格式: 第1行，2个整数T和C，空格分隔，分别表示询问的组数和容器的容量，1≤T≤10，1≤C≤N。
第2到T+1行，每行的第1个整数N，表示序列的元素数，1≤N≤10000。接下来N个整数，表示询问的序列。
输出格式: T行。若第i组的序列能得到，第i行输出Yes；否则，第i行输出No,1≤i≤T。
输入样例: 在这里给出一组输入。例如：
2 2 5 1 2 5 4 3 4 1 3 2 4 输出样例: 在这里给出相应的输出。例如：
No Yes 作者 谷方明 单位 吉林大学 代码长度限制 16 KB 时间限制 100 ms 内存限制 10 MB
思路： 本题为模拟题，模拟栈的出入，先创建一个栈，循环输入给定序列的每一个元素，每输入一个数字，就从==未入过栈==的最小元素开始入栈，一直到当前数字入栈之后截至，然后弹出栈顶元素，当栈顶元素和当前元素不匹配时，flag置为false,然后等到输入完毕，输出判断结果。
操作： 1.引入pre指针，记录未入栈的最小元素。在每次循环结束后，用当前输入元素pre=ans+1进行更新，在pre&amp;gt;之后的ans后，入栈将停止。 2.入栈判断问题：在本程序中遇到样例如：
1 10000 1 10000 2 9999 3 9998 4 9997 5 9996 6 9995..... 在入栈不判断时，就会爆栈，导致段错误。
代码如下： #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;using namespace std; int SS[10001]; int top = 0; int pre = 1; bool flag = true; int main() { int Size, n; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;Size); for (int i = 1; i &amp;lt;= n; i++) { int num = 0; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num); for (int j = 1; j &amp;lt;= num; j++) { int ans=0; scanf(&amp;#34;%d&amp;#34;, &amp;amp;ans); if(flag==true)//如果已经判断结束，就不再压栈，避免爆栈  for (int k = pre; k &amp;lt;= ans; k++) { SS[++top] = k; } if (top &amp;gt; Size)flag = false; if (SS[top] !</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第三次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第三次上机实验 7-1 二叉树最长路径 (100 分) 给定一棵二叉树T，求T中的最长路径的长度，并输出此路径上各结点的值。若有多条最长路径，输出最右侧的那条。
输入格式: 第1行，1个整数n，表示二叉树有n个结点， 1≤n≤100000.
第2行，2n+1个整数，用空格分隔，表示T的扩展先根序列， -1表示空指针，结点用编号1到n表示。
输出格式: 第1行，1个整数length，length表示T中的最长路径的长度。
第2行，length+1个整数，用空格分隔，表示最右侧的最长路径。
输入样例: 在这里给出一组输入。例如：
5 1 2 -1 -1 3 4 -1 -1 5 -1 -1 输出样例: 在这里给出相应的输出。例如：
2 1 3 5 考察方法： 本题考查树的基本运算，包括： 建立一棵二叉树``遍历树``求树的深度 思路：题中所给按照先根遍历建树，然后按照递归遍历求出高度，这里是可以用递归的，只要先求出每个结点的高度 再存入数组下标为树节点data所对应的值，即可保存在之后输出路径的时候可以直接查找比较。
下面就是代码：
建树： struct TNode { ElementType Data; BinTree Left; BinTree Right; };//树节点 BinTree CreatBinTree() { int num; BinTree t = NULL; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num); if (num == -1) { return NULL; }//递归出口  t = (BinTree)malloc(sizeof(struct TNode)); t-&amp;gt;Data = num; t-&amp;gt;Left = CreatBinTree();//创建左子树  t-&amp;gt;Right = CreatBinTree();//创建右子树  return t; } 求深度： int height(BinTree T) { if (T == NULL) { return -1; } int hl = height(T-&amp;gt;Left);//求取左子树  int hr = height(T-&amp;gt;Right);//求取右子树  if (hl &amp;gt; hr) { d[T-&amp;gt;Data] = hl + 1; return hl + 1; } else { d[T-&amp;gt;Data] = hr + 1; return hr + 1; } } 求路径： void path(BinTree T) { while (T !</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第二次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第二次上机实验 7-1 数列查询 已知数列的通项公式为:
f(n) = f(n-1)*11/10，f[1]=10. 通项从左向右计算，*和/分别表示整数乘法和除法。 现在，要多次查询数列项的值。
输入格式: 第1行，1个整数q，表示查询的次数， 1≤q≤10000. 第2至q+1行，每行1个整数i，表示要查询f(i)的值。
输入样例: 在这里给出一组输入。例如：
3 1 2 3 输出样例： 在这里给出相应的输出。例如：
10 11 12 作者 谷方明 单位 吉林大学 代码长度限制 16 KB 时间限制 10 ms 内存限制 1 MB 解法一： 在考场上时，没有考虑到这数字乘起来会有那么大，因此我直接开数组去存每个数量级的(11⁄10)^10，并且竟然把上式看成是double类型😅😅😅。
解法二： 和上种方法类似，考虑到数字较大我们不妨试一试，f[202]=195422668， f[203]=-214531794 好家伙😏 只要202位的数组就行， 那么，不妨循环存入相应次方的下标数组中，之后直接查找，代码如下：
#include&amp;lt;cstdio&amp;gt;using namespace std; int num[10003]; int main() { int n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); int sum=10; for(int i=1;i&amp;lt;=190;i++) { num[i]=sum; sum*=11; sum/=10; }//循环计数  int num1; for(int i=1;i&amp;lt;=n;i++) { scanf(&amp;#34;%d&amp;#34;,&amp;amp;num1); printf(&amp;#34;%d\n&amp;#34;,num[num1]); }//查找输出  return 0; } 7-2 稀疏矩阵之和 矩阵A和B都是稀疏矩阵。请计算矩阵的和A+B.</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第六次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第六次上机实验 7-1 高精度数加法 (100 分) 高精度数是指大大超出了标准数据类型能表示的范围的数，例如10000位整数。很多计算问题的结果都很大，因此，高精度数极其重要。
一般使用一个数组来存储高精度数的所有数位，数组中的每个元素存储该高精度数的1位数字或多位数字。 请尝试计算：N个高精度数的加和。这个任务对于在学习数据结构的你来说应该是小菜一碟。 。
输入格式: 第1行，1个整数N，表示高精度整数的个数，(1≤N≤10000)。
第2至N+1行，每行1个高精度整数x, x最多100位。
输出格式: 1行,1个高精度整数，表示输入的N个高精度数的加和。
输入样例: 在这里给出一组输入。例如
3 12345678910 12345678910 12345678910 输出样例: 在这里给出相应的输出。例如
37037036730 思路：高精度加法，通过字符数组形式输入，将数组倒置遍历相加，存入整型数组中，最后倒着输出结果。(本题目没有负数，可以放心按照正数处理。)我的代码为负数与正数均可处理。
代码如下： //#pragma warning(disable:4996) #include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;iostream&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;vector&amp;gt;using namespace std; char num1[101]; char num2[101]; int num[1000100]; int numm[1000100]; int len1 = 0; int len2 = 0; bool flag = true; void Plus1(char*n)//对正数的相加 { int j = 1; int ans = 0; for (int i = strlen(n) - 1; i &amp;gt;= 0; i--, j++) { int d = num[j] + (n[i] - &amp;#39;0&amp;#39;) + ans; if (d &amp;gt;= 10) { ans = 1; num[j] = d % 10; } else { num[j] = d; ans = 0; } } num[j] += ans; while (num[j]&amp;gt;= 10) { num[j] -= 10; num[++j]++; } len1 = max(len1, j); } void Plus2(char*n)//对负数的相加 { int j = 1; int ans = 0; for (int i = strlen(n) - 1; i &amp;gt;=1; i--, j++) { int d = numm[j] + (n[i] - &amp;#39;0&amp;#39;) + ans; if (d &amp;gt;= 10) { ans = 1; numm[j] = d % 10; } else { numm[j] = d; ans = 0; } } numm[j] += ans; while (numm[j] &amp;gt;= 10) { numm[j]-= 10; numm[++j]++; } len2 = max(len2, j); } void Minus(int*n1,int*n2,int len1,int len2)//大和减小和函数 { int ans = 0; for (int i = 1; i &amp;lt;= len1; i++) { int d = n1[i] - n2[i] + ans; if (d &amp;lt; 0) { ans = -1; n1[i] = d + 10; } else { ans = 0; n1[i] = d; } } int j = len1; while (n1[j] == 0) j--; if (!</description>
    </item>
    
    <item>
      <title>JLU数据结构荣誉课——第四次上机实验</title>
      <link>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/jlu%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%8D%A3%E8%AA%89%E8%AF%BE%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/</guid>
      <description>JLU数据结构荣誉课——第四次上机实验 7-1 连通分量 (100 分) 无向图 G 有 n 个顶点和 m 条边。求 G 的连通分量的数目。 输入格式: 第1行，2个整数n和m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000.
第2到m+1行，每行两个整数u和v，用空格分隔，表示顶点u到顶点v有一条边，u和v是顶点编号，1≤u,v≤n.
输出格式: 1行，1个整数，表示所求连通分量的数目。
输入样例: 在这里给出一组输入。例如：
6 5 1 3 1 2 2 3 4 5 5 6 输出样例: 在这里给出相应的输出。例如：
2 作者 谷方明 单位 吉林大学 代码长度限制 16 KB 时间限制 200 ms 内存限制 10 MB
思路：利用并查集，最后统计并查集个数，及father数组中存的值依旧为零的元素，得到答案。
#include&amp;lt;cstdio&amp;gt;using namespace std; int father[100001]; int find(int v) { if (father[v] == 0) return v; else return find(father[v]); } void Union(int x,int y) { int fx = find(x); int fy = find(y); if (fx !</description>
    </item>
    
    <item>
      <title>nzk的音乐</title>
      <link>https://hhhhlkf.github.io/post/nzk/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/nzk/</guid>
      <description>1.Binary-Star ——by SawanoHiroyuki[nZk]2.Tranquility ——by SawanoHiroyuki[nZk]3.UNICORN ——by 澤野弘之4.ViEW ——by mizuki(瑞葵)/SawanoHiroyuki[nZk]5.ninelie&amp;lt;cry-v&amp;gt; ——by SawanoHiroyuki[nZk]6.EARth ——by 澤野弘之7.Tot Musica ——by Ado8.counter・attack-m’aenkaind ——by 澤野弘之9.Roads to Ride ——by 澤野弘之10.ətˈæk 0N tάɪtn&amp;lt;TFSv&amp;gt;——by 澤野弘之</description>
    </item>
    
    <item>
      <title>模拟退火算法</title>
      <link>https://hhhhlkf.github.io/post/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hhhhlkf.github.io/post/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</guid>
      <description>啥都没有就是玩</description>
    </item>
    
  </channel>
</rss>
