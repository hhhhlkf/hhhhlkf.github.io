<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cv on Linexus blog</title>
    <link>https://hhhhlkf.github.io/tags/cv/</link>
    <description>Recent content in Cv on Linexus blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Sep 2025 21:00:06 +0800</lastBuildDate>
    <atom:link href="https://hhhhlkf.github.io/tags/cv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When Pedestrian Detection Meets Multi Modal Learning Generalist Model and Benchmark Dataset</title>
      <link>https://hhhhlkf.github.io/post/when-pedestrian-detection-meets-multi-modal-learning-generalist-model-and-benchmark-dataset/</link>
      <pubDate>Wed, 17 Sep 2025 21:00:06 +0800</pubDate>
      <guid>https://hhhhlkf.github.io/post/when-pedestrian-detection-meets-multi-modal-learning-generalist-model-and-benchmark-dataset/</guid>
      <description>&lt;h1 id=&#34;mmpedestron论文分析&#34;&gt;MMPedestron论文分析&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;论文标题：When Pedestrian Detection Meets Multi Modal Learning Generalist Model and Benchmark Dataset&lt;/li&gt;&#xA;&lt;li&gt;作者：Yi Zhang , Wang Zeng , Sheng Jin , Chen Qian Ping Luo , and Wentao Liu&lt;/li&gt;&#xA;&lt;li&gt;单位：Tsinghua University，SenseTime Research and Tetras.AI，The University of Hong Kong，Shanghai AI Laboratory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;研究动机&#34;&gt;研究动机&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;多模态感知的潜力与挑战：现有方法大多是“专科型模型”（specialist models），只针对单一模态或某一对模态设计，缺乏统一的、通用的“全科型模型”（generalist model）。&lt;/li&gt;&#xA;&lt;li&gt;缺乏通用模型的问题：需要一种能够 统一处理多种模态及其动态组合 的检测模型。&lt;/li&gt;&#xA;&lt;li&gt;数据基准不足：多模态、特别是包含事件相机（Event）的综合大规模基准数据集缺失。没有系统性的数据基准，也限制了多模态行人检测的研究发展。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;为克服现有行人检测方法对单一或有限模态的依赖，构建一个能够处理多模态输入并适应不同模态组合的通用模型，同时弥补缺乏多模态大规模基准数据集的问题。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;文章贡献&#34;&gt;文章贡献&lt;/h2&gt;&#xA;&lt;img src=&#34;https://hhhhlkf.github.io/img/MMPedestron/image-20250918111434038.png&#34; alt=&#34;image-20250918111434038&#34; style=&#34;zoom:50%;&#34; /&gt;&#xD;&#xA;&lt;p&gt;上图可以看到MMPedestron统一了多种模态输入，包括RGB、IR、Event、Depth和LiDAR，用于行人检测。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;提出了 MMPD 数据集&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建了首个大规模、多模态行人检测基准数据集，整合了现有公开数据集（RGB、IR、Depth、LiDAR 等），并新采集了 &lt;strong&gt;EventPed 数据集&lt;/strong&gt; 以弥补社区缺乏 RGB-Event 数据的空缺。&lt;/li&gt;&#xA;&lt;li&gt;数据集在 &lt;strong&gt;模态多样性&lt;/strong&gt;（RGB、IR、Depth、LiDAR、Event 及其组合）和 &lt;strong&gt;场景多样性&lt;/strong&gt;（监控、自动驾驶、机器人、室内外场景）两方面均具备丰富性，从而支持对通用模型的系统性评估。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;首次提出了“通用多模态行人检测模型”概念&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提出了 &lt;strong&gt;MMPedestron 模型&lt;/strong&gt;，能够处理多种输入模态及其动态组合，而不仅仅局限于单模态或固定模态对。&lt;/li&gt;&#xA;&lt;li&gt;模型在设计上强调 &lt;strong&gt;灵活性（flexibility）&lt;/strong&gt;、&lt;strong&gt;可扩展性（scalability）&lt;/strong&gt; 和 &lt;strong&gt;跨场景泛化能力（generalization ability）&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;显著的性能提升&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A2S2KResNet——论文概述与代码分析</title>
      <link>https://hhhhlkf.github.io/post/a2s2kresnet%E8%AE%BA%E6%96%87%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 22 Jan 2023 21:39:39 +0800</pubDate>
      <guid>https://hhhhlkf.github.io/post/a2s2kresnet%E8%AE%BA%E6%96%87%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;a2s2k-resnet的论文分析&#34;&gt;A2S2K-ResNet的论文分析&lt;/h1&gt;&#xA;&lt;h2 id=&#34;提出背景&#34;&gt;提出背景&lt;/h2&gt;&#xA;&lt;p&gt;为了使神经元有效地调整感受野大小和跨通道依赖性，本文提出了基于注意力的自适应频谱空间核改进的剩余网络，其中的改进点有几个：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;attention-based adaptive spectral–spatial kernel&lt;/li&gt;&#xA;&lt;li&gt;improved spectral–spatial ResNet&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;设计较新的模型结构&#34;&gt;设计较新的模型结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EFR module&lt;/li&gt;&#xA;&lt;li&gt;A2S2K-Net&amp;rsquo;s block&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;网络总体结构&#34;&gt;网络总体结构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络总体结构图&#34;&gt;网络总体结构图&lt;/h3&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/A2S2KResNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230122223532018.png&#34; alt=&#34;image-20230122223532018&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;分为A2S2K-block、ResNet block、Pool Layer、输出层。将重点阐述前两个模块。&lt;/p&gt;&#xA;&lt;h4 id=&#34;a2s2k-block&#34;&gt;A2S2K-block&lt;/h4&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/A2S2KResNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230122224459860.png&#34; alt=&#34;image-20230122224459860&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;来自于&lt;strong&gt;Selective kernel networks&lt;/strong&gt;，及通过attention操作将不同卷积核提取的特征进行自适应选取。其网络结构涉及到三个部分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Split：生成具有各种内核大小的多个路径，这些大小对应于神经元的不同感受野大小。&lt;/li&gt;&#xA;&lt;li&gt;Fuse：组合并汇总来自多个路径的信息，以获得选择权重的全局和全面表示。&lt;/li&gt;&#xA;&lt;li&gt;Select：根据选择权重聚合大小不同的内核的特征图。(及相加操作)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;代码片段如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 上层卷积&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_1x1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv1x1(X)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_1x1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;batch_norm1x1(x_1x1)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 下层卷积&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_3x3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv3x3(X)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x_3x3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;batch_norm3x3(x_3x3)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# concat操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cat([x_3x3, x_1x1], dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 加和(初步融合特征)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;U &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sum(x1, dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 全局池化操作，为了将特征进行融合和便于之后的attention操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pool(U)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 通过3D卷积进行特征融合&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv_se(S)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attention_vector &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cat(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 通过3D卷积进行扩张&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv_ex(Z)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv_ex(Z)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;unsqueeze(dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# softmax是为了将空间和维度的比例进行统一划分&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attention_vector &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;font-style:italic&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;softmax(attention_vector)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 所谓乘上attention后的结果进行权重自适应调整&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;V &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (x1 &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; attention_vector)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sum(dim&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;efr-module&#34;&gt;EFR Module&lt;/h4&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/A2S2KResNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230122231258793.png&#34; alt=&#34;image-20230122231258793&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>FSKNet——论文概述与代码分析</title>
      <link>https://hhhhlkf.github.io/post/fsknet%E8%AE%BA%E6%96%87%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 11 Jan 2023 10:15:06 +0800</pubDate>
      <guid>https://hhhhlkf.github.io/post/fsknet%E8%AE%BA%E6%96%87%E6%A6%82%E8%BF%B0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;fsknet的论-文分析&#34;&gt;FSKNet的论 文分析&lt;/h1&gt;&#xA;&lt;h2 id=&#34;提出背景&#34;&gt;提出背景&lt;/h2&gt;&#xA;&lt;p&gt;对早年提出的3D-CNN会导致参数量过大，对系统的训练能力要求较强。因此提出了FSKNet解决这一问题。其中主要参考改进点有两个：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设计了3D-CNN和2D-CNN转换模块，利用3D-CNN完成特征提取，同时降低空间和光谱的维数。&lt;/li&gt;&#xA;&lt;li&gt;在转换后的2D-CNN中，提出了一种选择性核机制，允许每个神经元根据双向输入信息尺度调整感受野大小。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;涉及较新的模型结构&#34;&gt;涉及较新的模型结构&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;2D和3D CNN结合进行特征提取的同时进行降维&lt;/li&gt;&#xA;&lt;li&gt;可变卷积操作&lt;/li&gt;&#xA;&lt;li&gt;可分离卷积操作&lt;/li&gt;&#xA;&lt;li&gt;最后的全局最大池化替换全连接进行加速&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;网络总体结构&#34;&gt;网络总体结构&lt;/h2&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111112800868.png&#34; alt=&#34;image-20230111112800868&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;其中所有的网络层结构链接如下表格所示：&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111113325118.png&#34; alt=&#34;image-20230111113325118&#34;&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111113343309.png&#34; alt=&#34;image-20230111113343309&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;其中给出了所有的层数，输出维度，链接层和参数，接下来将一一阐述。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3d-cnn-and-2d-cnn-conversion-modules&#34;&gt;3D-CNN and 2D-CNN conversion modules&lt;/h3&gt;&#xA;&lt;p&gt;本模块由三层3D-Conv、一层可分离3D-Conv和最后经过reshape操作后的2D-Conv组成：&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111114358755.png&#34; alt=&#34;image-20230111114358755&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;为了避免常规降维时，PCA对其他数据舍弃而导致的信息丢失，本论文采用了&lt;strong&gt;一边卷积一边降维&lt;/strong&gt;的方式，通过设置通道维数的大幅度stride进行降维。&lt;/p&gt;&#xA;&lt;p&gt;最后通过reshape+2D Conv进行图像的转换防止图像降维。&lt;/p&gt;&#xA;&lt;h3 id=&#34;selective-kernel-mechanism&#34;&gt;Selective kernel mechanism&lt;/h3&gt;&#xA;&lt;p&gt;下图是其内部结构：&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111122230279.png&#34; alt=&#34;image-20230111122230279&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;包括了三个重点的结构，可变卷积、注意力机制和可分离卷积。&lt;/p&gt;&#xA;&lt;h4 id=&#34;可变卷积&#34;&gt;可变卷积&lt;/h4&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/20200209143138345.png&#34; alt=&#34;image-20230111122230279&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;简要概括&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;可变形卷积是指卷积核在每一个元素上额外&lt;strong&gt;增加了一个参数方向参数&lt;/strong&gt;，这样卷积核就能在训练过程中扩展到很大的范围。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了解决在采样过程中卷积核过于固定，不能很好的适应局部空间的采样操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111125111095.png&#34; alt=&#34;image-20230111125111095&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;上图是可变形卷积的学习过程，首先偏差是通过一个卷积层获得，该卷积层的卷积核与普通卷积核一样。输出的偏差尺寸和输入的特征图尺寸一致。生成通道维度是2N，分别对应原始输出特征和偏移特征。这两个卷积核通过双线性插值后向传播算法同时学习。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;事实上，可变形卷积单元中增加的偏移量是网络结构的一部分，通过另外一个平行的标准卷积单元计算得到，进而也可以通过梯度反向传播进行端到端的学习。加上该偏移量的学习之后，可变形卷积核的大小和位置可以根据当前需要识别的图像内容进行动态调整，其直观效果就是不同位置的卷积核采样点位置会根据图像内容发生自适应的变化，从而适应不同物体的形状、大小等几何形变。然而，这样的操作引入了一个问题，即需要对不连续的位置变量求导。&lt;/p&gt;&#xA;&lt;h4 id=&#34;注意力机制&#34;&gt;注意力机制&lt;/h4&gt;&#xA;&lt;p&gt;注意力机制主要存在于se block中。&lt;/p&gt;&#xA;&lt;p&gt;注意力机制主要通过对当前输入的卷积层进行全局平均池化，并使用激活函数对得到的向量进行激活，再乘到相应的卷积层上，以达到对每个卷积层权重的赋值。&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111125803572.png&#34; alt=&#34;image-20230111125803572&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h4 id=&#34;可分离卷积&#34;&gt;可分离卷积&lt;/h4&gt;&#xA;&lt;p&gt;可分离卷积时经过注意力机制之后的卷积操作，通过可分离卷积进行网络加速，达到减小参数量并保持准确率的效果。&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;img src=&#34;https://hhhhlkf.github.io/img/FSKNet%e2%80%94%e2%80%94%e8%ae%ba%e6%96%87%e6%a6%82%e8%bf%b0%e4%b8%8e%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90/image-20230111130519219.png&#34; alt=&#34;image-20230111130519219&#34;&gt;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h3 id=&#34;分类器部分&#34;&gt;分类器部分&lt;/h3&gt;&#xA;&lt;p&gt;通过全局池化操作将上一层的卷积层从7×7×128转换成了长度为128的向量，并通过全卷积降至种类数，进行分类。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码实现部分&#34;&gt;代码实现部分&lt;/h2&gt;&#xA;&lt;p&gt;网络结构总体设计：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 组合模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ResnetBuilder&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;build&lt;/span&gt;(input_shape, num_outputs):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;original input shape:&amp;#39;&lt;/span&gt;, input_shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _handle_dim_ordering()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(input_shape) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; Exception(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Input shape should be a tuple (nb_channels, kernel_dim1, kernel_dim2, kernel_dim3)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;original input shape:&amp;#39;&lt;/span&gt;, input_shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 根据是否将通道放到最后一维进行变更&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; K&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image_dim_ordering() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tf&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            input_shape &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (input_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], input_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], input_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;], input_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;change input shape:&amp;#39;&lt;/span&gt;, input_shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Input(shape&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;input_shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# input = applyPCA(input, 30)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 3D-CNN and 2D-CNN conversion modules begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv3D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;), kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(conv1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv3D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(conv1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(conv2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(conv2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv3D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(conv2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(conv3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(conv3&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; SeparableConv3D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;128&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(conv3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(conv3&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keras_shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conv3_shape &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conv3&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keras_shape&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Reshape((conv3_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], conv3_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], conv3_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; conv3_shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;]))(conv3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# conv11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv2D(&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;, (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), padding&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;, kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;), kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 3D-CNN and 2D-CNN conversion modules end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Selective kernel mechanism begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# conv12 - 可变卷积&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l_offset &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ConvOffset2D(&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;)(l)  &lt;span style=&#34;color:#6272a4&#34;&gt;# 求取偏移量offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv2D(&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;, (&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), padding&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;, strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(l_offset)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(l1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(l1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# conv21 - 可变卷积&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l_offset &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ConvOffset2D(&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;)(l)  &lt;span style=&#34;color:#6272a4&#34;&gt;# 求取偏移量offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Conv2D(&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;, (&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;), padding&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;, strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), dilation_rate&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    kernel_regularizer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;), kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;, use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(l_offset)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(l2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(l2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; keras&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;layers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add([l1, l2])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# attention 操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        se &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; squeeze_excite_block(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; multiply([l1, se])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; multiply([l2, se])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; keras&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;layers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add([l1, l2])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 可分离卷积&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; SeparableConv2D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;128&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; SeparableConv2D(filters&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;256&lt;/span&gt;, kernel_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;regularizers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.01&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            use_bias&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;)(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; BatchNormalization()(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Selective kernel mechanism end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# out&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; GlobalAvgPool2D()(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 输入分类器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Classifier block&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dense &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Dense(units&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;num_outputs, activation&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;softmax&amp;#34;&lt;/span&gt;, kernel_initializer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;he_normal&amp;#34;&lt;/span&gt;)(l)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Model(inputs&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt;, outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;dense)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; model&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;build_resnet_8&lt;/span&gt;(input_shape, num_outputs):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# (1,7,7,200),16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ResnetBuilder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build(input_shape, num_outputs)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数据准备&#34;&gt;数据准备：&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 加载数据&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mat_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;loadmat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;F:/transfer code/Tensorflow  Learning/SKNet/datasets/IN/Indian_pines_corrected.mat&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_IN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; mat_data[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;indian_pines_corrected&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 标签数据&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mat_gt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;loadmat(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;F:/transfer code/Tensorflow  Learning/SKNet/datasets/IN/Indian_pines_gt.mat&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gt_IN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; mat_gt[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;indian_pines_gt&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# print(&amp;#39;data_IN:&amp;#39;,data_IN)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (145,145,200)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(gt_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (145,145)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 标签拷贝&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_gt_IN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gt_IN&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;batch_size &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nb_classes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nb_epoch &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 400&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 单个训练样本长宽大小&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img_rows, img_cols &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;23&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 27, 27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patience &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INPUT_DIMENSION_CONV &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INPUT_DIMENSION &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOTAL_SIZE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10249&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VAL_SIZE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1025&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TRAIN_SIZE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5128&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TEST_SIZE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; TOTAL_SIZE &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; TRAIN_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VALIDATION_SPLIT &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 20% for training and 80% for validation and testing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.9  1031&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.8  2055&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.7  3081&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.6  4106&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.5  5128&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 0.4  6153&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 通道数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img_channels &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATCH_LENGTH &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# Patch_size (13*2+1)*(13*2+1)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (145,145)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 21025&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;:])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (200,)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;:]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(new_gt_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 21025&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 对数据进行reshape处理之后，进行scale操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]), np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;:]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; new_gt_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prod(new_gt_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]), )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 标准化操作，即将所有数据沿行沿列均归一化道0-1之间&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; preprocessing&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;scale(data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (21025, 200)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 对数据边缘进行填充操作，有点类似之前的镜像操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], data_IN&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;whole_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data_&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padded_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; zeroPadding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;zeroPadding_3D(whole_data, PATCH_LENGTH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(padded_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# (151, 151, 200)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 因为选择的是7*7的滑动窗口，145*145,145/7余5，也就是说有5个像素点扫描不到，所有在长宽每边个填充3，也就是6，这样的话&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 就可以将所有像素点扫描到&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ITER &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CATEGORY &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 提前准备训练集的接收格式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;train_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;zeros((TRAIN_SIZE, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PATCH_LENGTH &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PATCH_LENGTH &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, INPUT_DIMENSION_CONV))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(train_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 提前准备测试集的接收格式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;zeros((TEST_SIZE, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PATCH_LENGTH &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; PATCH_LENGTH &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, INPUT_DIMENSION_CONV))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(test_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 评价指标&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;KAPPA_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OA_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AA_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TRAINING_TIME_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TESTING_TIME_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ELEMENT_ACC_3D_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;zeros((ITER, CATEGORY))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# seeds = [1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229] 随机数种子&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seeds &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;1334&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;训练步骤&#34;&gt;训练步骤：&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; index_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(ITER):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;# &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; Iteration&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; (index_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# Iteration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# save the best validated model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    best_weights_HSICNNet_path &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;F:/transfer code/Tensorflow  Learning/SKNet/models-in-densenet-23-514/Indian_best_3D_HSICNNet_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        index_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.hdf5&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 通过sampling函数拿到测试和训练样本&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;seed(seeds[index_iter])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    train_indices, test_indices &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sampling(VALIDATION_SPLIT, gt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# train_indices 2055     test_indices 8094&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# gt本身是标签类，从标签类中取出相应的标签 -1，转成one-hot形式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gt[train_indices] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; to_categorical(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;asarray(y_train))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gt[test_indices] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; to_categorical(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;asarray(y_test))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# whole_data 是未填充之前的图片、train_indices是用做训练的训练点。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    train_assign &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; indexToAssignment(train_indices, whole_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], whole_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], PATCH_LENGTH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(train_assign)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        train_data[i] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; selectNeighboringPatch(padded_data, train_assign[i][&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], train_assign[i][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], PATCH_LENGTH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# whole_data 是未填充之前的图片、train_indices是用做训练的训练点。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 返回的是在整个数据图片上的x,y坐标对&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test_assign &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; indexToAssignment(test_indices, whole_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], whole_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], PATCH_LENGTH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(test_assign)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# 求取该像素点周围预设卷积区域的大小&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        test_data[i] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; selectNeighboringPatch(padded_data, test_assign[i][&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], test_assign[i][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], PATCH_LENGTH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; train_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(train_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], train_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], train_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], INPUT_DIMENSION_CONV)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_test_all &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; test_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(test_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], test_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], test_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], INPUT_DIMENSION_CONV)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 选取部分进行训练&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_val &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x_test_all[&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE:]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_val &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; y_test[&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE:]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 选取部分进行测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x_test_all[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; y_test[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 加载模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model_HSICNNet()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 创建一个实例history&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    history &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; LossHistory()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# monitor：监视数据接口，此处是val_loss,patience是在多少步可以容忍没有提高变化&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    earlyStopping6 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; kcallbacks&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EarlyStopping(monitor&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;, patience&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;patience, verbose&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, mode&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 用户每次epoch最后都会保存模型，如果save_best_only=True,那么最近验证误差最后的数据将会被保存下来&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    saveBestModel6 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; kcallbacks&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ModelCheckpoint(best_weights_HSICNNet_path, monitor&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;, verbose&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                save_best_only&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                mode&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 训练和验证&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tic6 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clock()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape, x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# (2055,7,7,200)  (7169,7,7,200)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    history_3d_HSICNNet &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;fit(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], x_train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), y_train,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        validation_data&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(x_val&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(x_val&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], x_val&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], x_val&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], x_val&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), y_val),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        batch_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;batch_size,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nb_epoch&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;nb_epoch, shuffle&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;, callbacks&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[earlyStopping6, saveBestModel6, history])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    toc6 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clock()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tic7 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clock()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loss_and_metrics &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;evaluate(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), y_test,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        batch_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;batch_size)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    toc7 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;clock()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;3D HSICNNet Time: &amp;#39;&lt;/span&gt;, toc6 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; tic6)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;3D HSICNNet Test time:&amp;#39;&lt;/span&gt;, toc7 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; tic7)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;3D HSICNNet Test score:&amp;#39;&lt;/span&gt;, loss_and_metrics[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;3D HSICNNet Test accuracy:&amp;#39;&lt;/span&gt;, loss_and_metrics[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(history_3d_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;history&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;keys())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 预测&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pred_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;predict(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;], x_test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;argmax(axis&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 跟踪值出现的次数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    collections&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Counter(pred_test)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gt_test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gt[test_indices] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# print(len(gt_test))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 8194&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 这是测试集，验证和测试还没有分开&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    overall_acc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;accuracy_score(pred_test, gt_test[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    confusion_matrix &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;confusion_matrix(pred_test, gt_test[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    each_acc, average_acc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; averageAccuracy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AA_andEachClassAccuracy(confusion_matrix)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    kappa &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; metrics&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cohen_kappa_score(pred_test, gt_test[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;VAL_SIZE])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    KAPPA_3D_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(kappa)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OA_3D_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(overall_acc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AA_3D_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(average_acc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TRAINING_TIME_3D_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(toc6 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; tic6)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TESTING_TIME_3D_HSICNNet&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(toc7 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; tic7)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ELEMENT_ACC_3D_HSICNNet[index_iter, :] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; each_acc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# 绘制acc-loss曲线&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    history&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;loss_plot(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;epoch&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3D HSICNNet finished.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;# &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; Iteration&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; (index_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行环境&#34;&gt;运行环境：&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;python3.7&lt;/strong&gt; + &lt;strong&gt;tensorflow1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
